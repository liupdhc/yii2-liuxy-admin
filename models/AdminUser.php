<?php

namespace liuxy\admin\models;

use Yii;
use yii\base\Security;

/**
 * This is the model class for table "admin_user".
 *
 * @property integer $id
 * @property string $username
 * @property string $name
 * @property string $password_prefix
 * @property string $password
 * @property integer $status
 * @property integer $insert_time
 * @property string $insert_by
 * @property string $update_by
 * @property integer $update_time
 * @property string $ext1
 * @property string $trd_identifier
 */
class AdminUser extends \yii\liuxy\ActiveRecord {

    public static $pk = 'id';

    const SESSION_USER = 'admin.session.';
    const CACHE_MY_PERMISSION = 'my.permlist.';
    /**
     * @inheritdoc
     */
    public static function tableName() {
        return 'admin_user';
    }

    /**
     * @inheritdoc
     */
    public function rules() {
        return [
            [['username', 'name', 'password_prefix', 'password'], 'required'],
            [['status', 'insert_time', 'update_time'], 'integer'],
            [['username', 'password_prefix', 'password', 'insert_by', 'update_by'], 'string', 'max' => 32],
            [['name'], 'string', 'max' => 100],
            [['ext1'], 'string', 'max' => 1000],
            [['trd_identifier'], 'string', 'max' => 50],
            [['username'], 'unique']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels() {
        return [
            'id' => 'ID',
            'username' => '登录用户名',
            'name' => '前台显示用户名',
            'password_prefix' => '密码前缀(MD5)',
            'password' => '密码(MD5)： 输入密码与password_prefix作MD5',
            'status' => '(1)ok,(0)disable',
            'insert_time' => '插入时间',
            'insert_by' => '添加者',
            'update_by' => '最后更新者',
            'update_time' => '最后更新时间',
            'ext1' => '扩展属性',
            'trd_identifier' => '第三方标识',
        ];
    }

    /**
     * @inheritDoc
     */
    public function afterSave($insert, $changedAttributes) {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if (!$insert) {
            self::clearPermission($this->id);
        }
    }


    /**
     * 验证用户登录
     * @param $userName
     * @param $password
     */
    public static function auth($userName, $password) {
        /**
         * @var $user \liuxy\admin\models\AdminUser
         */
        $user = self::find()->where(['username'=>$userName])->one();
        if ($user && $user->status === self::STATUS_OK && md5($user->password_prefix.$password) === $user->password) {
            self::setLogin($user);
            return $user;
        }
        return false;
    }

    /**
     * 判断是否登陆
     * @return bool
     */
    public static function isLoged() {
        $sessionId = Yii::$app->session->getId();
        return Yii::$app->session->get(self::SESSION_USER) ? true :
            self::getCache()->get(self::SESSION_USER.$sessionId) ? true : false;
    }

    /**
     * 获取登录用户
     * @return \liuxy\admin\models\AdminUser
     */
    public static function getUser() {
        $sessionId = Yii::$app->session->getId();
        return Yii::$app->session->get(self::SESSION_USER) ? : self::getCache()->get(self::SESSION_USER.$sessionId);
    }

    /**
     * 设置登录状态
     * @param $user
     */
    public static function setLogin($user) {
        if (!Yii::$app->session->isActive) {
            Yii::$app->session->open();
        }
        $sessionId = Yii::$app->session->getId();
        Yii::$app->session->set(self::SESSION_USER, $user);
        self::getCache()->set(self::SESSION_USER.$sessionId, $user);
    }

    /**
     * 注销登录状态
     */
    public static function setLogout() {
        Yii::$app->session->remove(self::SESSION_USER);
        $sessionId = Yii::$app->session->getId();
        self::getCache()->delete(self::SESSION_USER.$sessionId);
    }

    /**
     * 清除用户的权限缓存
     * @param $userId
     */
    public static function clearPermission($userId) {
        self::getCache()->delete(self::CACHE_MY_PERMISSION.$userId);
    }

    /**
     * 获取用户的权限列表
     * @param $userId
     */
    public static function getPermission($userId) {
        $_cache_key = self::CACHE_MY_PERMISSION.$userId;
        $myPermission = self::getCache()->get($_cache_key);
        if ($myPermission) {
            return $myPermission;
        }

        $roles = [];
        foreach (AdminUserRole::find ()->where ( ['user_id'=>$userId] )->all() as $role) {
            $roles[]=$role->role_id;
        }

        $permissions = [];
        foreach (RolePermission::find()->where(['role_id'=>$roles])->all() as $permission) {
            $permissions[] = $permission['permission_id'];
        }
        self::getCache()->set($_cache_key, $permissions);
        return $permissions;
    }

    /**
     * 判断用户是否有权限访问
     * @param unknown $userId
     */
    public static function hasPermission($userId, $current) {
        if (empty($current) || $current == '#') {
            return true;
        }
        $p = Permission::findOne(['link'=>$current]);
        if ($p) {
            $myPermissions = self::getPermission($userId);
            return in_array($p['id'], $myPermissions);
        } else {
            return true;
        }
    }
}